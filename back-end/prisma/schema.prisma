generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contact_messages {
  id            Int           @id @default(autoincrement())
  nama_lengkap  String        @db.VarChar(255)
  email         String        @db.VarChar(255)
  subjek        String        @db.VarChar(500)
  pesan         String
  tanggal_kirim DateTime      @default(now())
  tanggal_balas DateTime?
  created_at    DateTime      @default(now())
  updated_at    DateTime
  status        MessageStatus @default(BelumDibaca)

  @@index([email])
  @@index([status])
  @@index([tanggal_kirim])
}

model Province {
  id              String           @id
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  regencies       Regency[]
  stuntingRecords StuntingRecord[]

  @@map("provinces")
}

model Regency {
  id              String           @id
  provinceId      String           @map("province_id")
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  districts       District[]
  province        Province         @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  stuntingRecords StuntingRecord[]

  @@map("regencies")
}

model District {
  id              String           @id
  regencyId       String           @map("regency_id")
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  regency         Regency          @relation(fields: [regencyId], references: [id], onDelete: Cascade)
  stuntingRecords StuntingRecord[]
  villages        Village[]

  @@map("districts")
}

model Village {
  id              String           @id
  districtId      String           @map("district_id")
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  stuntingRecords StuntingRecord[]
  district        District         @relation(fields: [districtId], references: [id], onDelete: Cascade)

  @@map("villages")
}

model Education {
  id                   Int                       @id @default(autoincrement())
  title                String
  slug                 String                    @unique
  excerpt              String
  category             String
  headerImage          String?                   @map("header_image")
  tags                 String[]
  source               String?
  author               String
  publishDate          DateTime?                 @map("publish_date")
  createdAt            DateTime                  @default(now()) @map("created_at")
  readingTime          Int                       @map("reading_time")
  viewCount            Int                       @default(0) @map("view_count")
  isPublished          Boolean                   @default(false) @map("is_published")
  isDraft              Boolean                   @default(true) @map("is_draft")
  isPopular            Boolean                   @default(false) @map("is_popular")
  recommendedEducation RecommendedEducationType  @default(normal) @map("recomended_education")
  updatedAt            DateTime                  @updatedAt @map("updated_at")
  conclusions          EducationConclusion[]
  importantPoints      EducationImportantPoint[]
  sections             EducationSection[]
  views                EducationView[]

  @@map("educations")
}

model EducationSection {
  id                  Int       @id @default(autoincrement())
  educationId         Int       @map("education_id")
  heading             String
  paragraph           String
  sectionOrder        Int       @map("section_order")
  illustrationType    String?   @map("illustration_type")
  illustrationUrl     String?   @map("illustration_url")
  illustrationCaption String?   @map("illustration_caption")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  education           Education @relation(fields: [educationId], references: [id], onDelete: Cascade)

  @@map("education_sections")
}

model EducationConclusion {
  id          Int       @id @default(autoincrement())
  educationId Int       @map("education_id")
  heading     String
  paragraph   String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  education   Education @relation(fields: [educationId], references: [id], onDelete: Cascade)

  @@map("education_conclusions")
}

model EducationImportantPoint {
  id          Int       @id @default(autoincrement())
  educationId Int       @map("education_id")
  content     String
  pointOrder  Int       @map("point_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  education   Education @relation(fields: [educationId], references: [id], onDelete: Cascade)

  @@map("education_important_points")
}

model EducationView {
  id          Int       @id @default(autoincrement())
  educationId Int       @map("education_id")
  userIp      String    @map("user_ip")
  createdAt   DateTime  @default(now()) @map("created_at")
  education   Education @relation(fields: [educationId], references: [id], onDelete: Cascade)

  @@map("education_views")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("USER")
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model SuggestedAction {
  id              Int              @id @default(autoincrement())
  suggestion      String
  status          String
  stuntingRecords StuntingRecord[]

  @@map("suggestion_actions")
}

model StuntingRecord {
  id                     String           @id @default(cuid())
  childName              String           @map("child_name")
  motherName             String           @map("mother_name")
  birthDate              DateTime         @map("birth_date")
  gender                 String           @map("gender")
  weight                 Float            @map("weight")
  height                 Float            @map("height")
  ageInMonths            Int              @map("age_in_months")
  provinceId             String
  regencyId              String
  districtId             String
  villageId              String
  status                 String
  riskPercentage         Float            @map("risk_percentage")
  heightPercentile       Float?           @map("height_percentile")
  weightPercentile       Float?           @map("weight_percentile")
  heightCategory         String?          @map("height_category")
  weightCategory         String?          @map("weight_category")
  suggestedActionId      Int?             @map("suggested_action_id")
  recommendedEducationId Int?             @map("recommended_education_id")
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @updatedAt @map("updated_at")
  district               District         @relation(fields: [districtId], references: [id])
  province               Province         @relation(fields: [provinceId], references: [id])
  regency                Regency          @relation(fields: [regencyId], references: [id])
  suggestedAction        SuggestedAction? @relation(fields: [suggestedActionId], references: [id], map: "fk_stunting_suggested_action")
  village                Village          @relation(fields: [villageId], references: [id])

  @@map("stunting_records")
}

enum RecommendedEducationType {
  normal
  stunting
  severly_stunting

  @@map("recommended_education_type")
}

enum MessageStatus {
  BelumDibaca
  Ditolak
  Dibalas
}
